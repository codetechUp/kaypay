security:
    encoders:
        App\Entity\Users:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Users
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/login   
            stateless: true
            anonymous: true
            provider: app_user_provider 
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: App\Jwt\TranslatedAuthenticationFailureHandler
            
        api:
            pattern:   ^/api
            stateless: true
            anonymous: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
       # api:
           # pattern:   ^/api
            #stateless: true
            #guard:
                #authenticators:
                #    - lexik_jwt_authentication.jwt_token_authenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    #access_control:
       # - { path: '^/admin', roles: ROLE_USER_IP, ip: 127.0.0.1 }
        #- { path: '^/admin', roles: ROLE_USER_PORT, ip: 127.0.0.1, port: 8080 }
       # - { path: '^/admin', roles: ROLE_USER_HOST, host: symfony\.com$ }
        #- { path: '^/api/register', roles: ROLE_ADMIN_SYST, methods: [POST, PUT] }